#cloud-config
ssh_pwauth: yes
password: Observability2021!
chpasswd:
  expire: false

package_update: true

apt:
  preserve_sources_list: false
  sources_list: |
    deb http://de.archive.ubuntu.com/ubuntu hirsute main restricted universe multiverse
    deb http://de.archive.ubuntu.com/ubuntu hirsute-updates main restricted universe multiverse
    deb http://de.archive.ubuntu.com/ubuntu hirsute-security main restricted universe multiverse
    deb http://de.archive.ubuntu.com/ubuntu hirsute-backports main restricted universe multiverse

packages:
  - unzip
  - git
  - shellinabox
  - lynx
  - w3m
  - gnupg2
  - docker-compose

write_files:
  - path: /etc/skel/.profile
    content: |
      helm() {
        if [ -z ${ACCESS_TOKEN+x} ]; then echo "ACCESS_TOKEN is unset. Please export ACCESS_TOKEN=YOUR_TOKEN"; return; fi
        if [[ ${#ACCESS_TOKEN} < 22 ]]; then echo "ACCESS_TOKEN looks too short. It should be a string of at least 22 characters."; return; fi
        if [ -z ${REALM+x} ]; then echo "REALM is unset. Please export REALM=YOUR_REALM"; return; fi
        if [[ ! $REALM  =~ ^(us0|us1|us2|eu0)$ ]]; then echo "REALM is not one of the supported realms. Check that it is one of us0, us1, us2 or eu0."; return; fi

        echo "Using ACCESS_TOKEN=$ACCESS_TOKEN"
        echo "Using REALM=$REALM"

        command helm "$@"
      }

      terraform() {
        if [ -z ${ACCESS_TOKEN+x} ]; then echo "ACCESS_TOKEN is unset. Please export ACCESS_TOKEN=YOUR_TOKEN"; return; fi
        if [ -z ${REALM+x} ]; then echo "REALM is unset. Please export REALM=YOUR_REALM"; return; fi

        echo "Using ACCESS_TOKEN=$ACCESS_TOKEN"
        echo "Using REALM=$REALM"

        command terraform "$@"
      }

      echo "Waiting for cloud-init status..."
      if ! /usr/bin/timeout 180 grep -q 'Cloud-init .*finished at' <(tail -f /var/log/cloud-init-output.log); then
        echo "Instance setup did not complete after 3 minutes. Please try again.";
      else
        echo "Your instance is ready!";
      fi

      if [ -e ~/.instance ]; then
        INSTANCE=$(cat ~/.instance)
      fi
      if [ -z ${INSTANCE+x} ]; then
        INSTANCE=$(cat /dev/urandom | base64 | tr -dc 'a-z' | head -c4)
        sudo sed -i "s/127.0.0.1.*/127.0.0.1 $INSTANCE.local $INSTANCE localhost/" /etc/hosts
        sudo hostnamectl set-hostname $INSTANCE
        # Set color prompt
        export PS1="${debian_chroot:+($debian_chroot)}\[\033[01;32m\]\u@\$INSTANCE\[\033[00m\]:\[\033[01;34m\]\w\[\033[00m\]\$ "
        echo $INSTANCE > ~/.instance
      fi
      export INSTANCE
      export KUBECONFIG=/home/ubuntu/.kube/config
    append: true
  - path: /etc/rancher/k3s/registries.yaml
    permissions: '0600'
    owner: root:root
    content: |
      mirrors:
        docker.registry:
          endpoint:
            - "http://docker.registry:9999"
  - path: /etc/docker/daemon.json
    content: |
      {
        "insecure-registries" : ["docker.registry:9999"]
      }
  - path: /usr/local/bin/setup-docker-registry.sh
    permissions: '0744'
    content: |
      #!/usr/bin/env bash
      REGISTRY_NAME=docker.registry
      REGISTRY_PORT=9999
      NODE_IP=$(kubectl get nodes -o jsonpath='{.items[*].status.addresses[?(@.type=="InternalIP")].address}')
      echo "$NODE_IP $REGISTRY_NAME" | tee -a /etc/hosts
      echo "$NODE_IP $REGISTRY_NAME" | tee -a /etc/cloud/templates/hosts.debian.tmpl
      systemctl restart docker
      systemctl restart k3s

runcmd:
  # Install K3s
  - curl -sfL https://get.k3s.io | sh -
  # Install Helm
  - curl -s https://raw.githubusercontent.com/helm/helm/master/scripts/get-helm-3 | bash
  # Install K9s (Kubernetes UI)
  - curl -S -OL https://github.com/derailed/k9s/releases/download/v0.25.4/k9s_Linux_x86_64.tar.gz
  - tar xfz k9s_Linux_x86_64.tar.gz -C /usr/local/bin/ k9s
  # Download Bootcamp
  - git clone https://github.com/a-staebler/o11y-bootcamp /home/ubuntu/o11y-bootcamp
  # Configure motd
  - curl -s https://raw.githubusercontent.com/signalfx/observability-workshop/master/cloud-init/motd -o /etc/motd
  - chmod -x /etc/update-motd.d/*
  # Install Terraform
  - curl -S -OL https://releases.hashicorp.com/terraform/1.0.11/terraform_1.0.11_linux_amd64.zip
  - unzip -qq terraform_1.0.11_linux_amd64.zip -d /usr/local/bin
  # Create kube config and set correct permissions on ubuntu user home directory
  - mkdir /home/ubuntu/.kube && kubectl config view --raw > /home/ubuntu/.kube/config
  - chmod 400 /home/ubuntu/.kube/config
  - chown -R ubuntu:ubuntu /home/ubuntu
  # Configure shellinabox port and disable ssl then restart
  - sed -i 's/SHELLINABOX_PORT=4200/SHELLINABOX_PORT=6501/'  /etc/default/shellinabox
  - sed -i "s/\"--no-beep\"/\"--no-beep --disable-ssl\"/" /etc/default/shellinabox
  - service shellinabox restart
  - bash /usr/local/bin/setup-docker-registry.sh
  - kubectl apply -f ~/o11y-bootcamp/k3s/registry/registry.yaml
